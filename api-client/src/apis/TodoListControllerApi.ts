/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TodoItemCreateRequestDto,
  TodoItemResponseDto,
  TodoListCreateRequestDto,
  TodoListResponseDto,
} from '../models/index';
import {
    TodoItemCreateRequestDtoFromJSON,
    TodoItemCreateRequestDtoToJSON,
    TodoItemResponseDtoFromJSON,
    TodoItemResponseDtoToJSON,
    TodoListCreateRequestDtoFromJSON,
    TodoListCreateRequestDtoToJSON,
    TodoListResponseDtoFromJSON,
    TodoListResponseDtoToJSON,
} from '../models/index';

export interface CreateTodoItemByListIdRequest {
    id: string;
    todoItemCreateRequestDto: TodoItemCreateRequestDto;
}

export interface CreateTodoListRequest {
    todoListCreateRequestDto: TodoListCreateRequestDto;
}

export interface DeleteTodoItemByListIdRequest {
    id: string;
    itemId: string;
}

export interface DeleteTodoListByIdRequest {
    id: string;
}

export interface GetDeletedItemsByListIdRequest {
    id: string;
}

export interface GetTodoItemsByListIdRequest {
    id: string;
}

export interface GetTodoListByIdRequest {
    id: string;
}

export interface UpdateTodoItemByIdRequest {
    id: string;
    itemId: string;
    todoItemCreateRequestDto: TodoItemCreateRequestDto;
}

/**
 * 
 */
export class TodoListControllerApi extends runtime.BaseAPI {

    /**
     */
    async createTodoItemByListIdRaw(requestParameters: CreateTodoItemByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodoItemResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createTodoItemByListId.');
        }

        if (requestParameters.todoItemCreateRequestDto === null || requestParameters.todoItemCreateRequestDto === undefined) {
            throw new runtime.RequiredError('todoItemCreateRequestDto','Required parameter requestParameters.todoItemCreateRequestDto was null or undefined when calling createTodoItemByListId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/todo-lists/{id}/items`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TodoItemCreateRequestDtoToJSON(requestParameters.todoItemCreateRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoItemResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createTodoItemByListId(requestParameters: CreateTodoItemByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodoItemResponseDto> {
        const response = await this.createTodoItemByListIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createTodoListRaw(requestParameters: CreateTodoListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodoListResponseDto>> {
        if (requestParameters.todoListCreateRequestDto === null || requestParameters.todoListCreateRequestDto === undefined) {
            throw new runtime.RequiredError('todoListCreateRequestDto','Required parameter requestParameters.todoListCreateRequestDto was null or undefined when calling createTodoList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/todo-lists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TodoListCreateRequestDtoToJSON(requestParameters.todoListCreateRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoListResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createTodoList(requestParameters: CreateTodoListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodoListResponseDto> {
        const response = await this.createTodoListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTodoItemByListIdRaw(requestParameters: DeleteTodoItemByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodoItemResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTodoItemByListId.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteTodoItemByListId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo-lists/{id}/items/{itemId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoItemResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async deleteTodoItemByListId(requestParameters: DeleteTodoItemByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodoItemResponseDto> {
        const response = await this.deleteTodoItemByListIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTodoListByIdRaw(requestParameters: DeleteTodoListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodoListResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTodoListById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo-lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoListResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async deleteTodoListById(requestParameters: DeleteTodoListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodoListResponseDto> {
        const response = await this.deleteTodoListByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDeletedItemsByListIdRaw(requestParameters: GetDeletedItemsByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TodoItemResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeletedItemsByListId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo-lists/{id}/deleted-items`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TodoItemResponseDtoFromJSON));
    }

    /**
     */
    async getDeletedItemsByListId(requestParameters: GetDeletedItemsByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TodoItemResponseDto>> {
        const response = await this.getDeletedItemsByListIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTodoItemsByListIdRaw(requestParameters: GetTodoItemsByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TodoItemResponseDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTodoItemsByListId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo-lists/{id}/items`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TodoItemResponseDtoFromJSON));
    }

    /**
     */
    async getTodoItemsByListId(requestParameters: GetTodoItemsByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TodoItemResponseDto>> {
        const response = await this.getTodoItemsByListIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTodoListByIdRaw(requestParameters: GetTodoListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodoListResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTodoListById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo-lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoListResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getTodoListById(requestParameters: GetTodoListByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodoListResponseDto> {
        const response = await this.getTodoListByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTodoListsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TodoListResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo-lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TodoListResponseDtoFromJSON));
    }

    /**
     */
    async getTodoLists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TodoListResponseDto>> {
        const response = await this.getTodoListsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTodoItemByIdRaw(requestParameters: UpdateTodoItemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodoItemResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTodoItemById.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateTodoItemById.');
        }

        if (requestParameters.todoItemCreateRequestDto === null || requestParameters.todoItemCreateRequestDto === undefined) {
            throw new runtime.RequiredError('todoItemCreateRequestDto','Required parameter requestParameters.todoItemCreateRequestDto was null or undefined when calling updateTodoItemById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/todo-lists/{id}/items/{itemId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TodoItemCreateRequestDtoToJSON(requestParameters.todoItemCreateRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoItemResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateTodoItemById(requestParameters: UpdateTodoItemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodoItemResponseDto> {
        const response = await this.updateTodoItemByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
