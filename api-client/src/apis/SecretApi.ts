/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SecretCreateRequestDto,
  SecretPreviewResponseDto,
  SecretResponseDto,
} from '../models/index';
import {
    SecretCreateRequestDtoFromJSON,
    SecretCreateRequestDtoToJSON,
    SecretPreviewResponseDtoFromJSON,
    SecretPreviewResponseDtoToJSON,
    SecretResponseDtoFromJSON,
    SecretResponseDtoToJSON,
} from '../models/index';

export interface CreateSecretRequest {
    secretCreateRequestDto: SecretCreateRequestDto;
}

export interface DeleteSecretRequest {
    id: string;
}

export interface GetSecretByIdRequest {
    id: string;
}

export interface GetSecretPreviewByIdRequest {
    id: string;
}

/**
 * 
 */
export class SecretApi extends runtime.BaseAPI {

    /**
     */
    async createSecretRaw(requestParameters: CreateSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecretResponseDto>> {
        if (requestParameters.secretCreateRequestDto === null || requestParameters.secretCreateRequestDto === undefined) {
            throw new runtime.RequiredError('secretCreateRequestDto','Required parameter requestParameters.secretCreateRequestDto was null or undefined when calling createSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/secrets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecretCreateRequestDtoToJSON(requestParameters.secretCreateRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createSecret(requestParameters: CreateSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecretResponseDto> {
        const response = await this.createSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSecretRaw(requestParameters: DeleteSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSecret.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/secrets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteSecret(requestParameters: DeleteSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSecretByIdRaw(requestParameters: GetSecretByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecretResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSecretById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/secrets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getSecretById(requestParameters: GetSecretByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecretResponseDto> {
        const response = await this.getSecretByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSecretPreviewByIdRaw(requestParameters: GetSecretPreviewByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecretPreviewResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSecretPreviewById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/secrets/{id}/preview`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretPreviewResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getSecretPreviewById(requestParameters: GetSecretPreviewByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecretPreviewResponseDto> {
        const response = await this.getSecretPreviewByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
